<?php

/**
*
 * @author Javier Maties - Geekia
 * @since 02-04-2013
 * @version 1.0
 * @license <a href="http://opensource.org/licenses/gpl-license.php" rel="nofollow">http://opensource.org/licenses/gpl-license.php</a> GNU Public License
 * @link <a href="http://www.geekia.es" rel="nofollow">http://www.geekia.es</a>
 **/


/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function wikiloc_field_info() {
	return array(
		// We name our field as the associative name of the array.
		'wikiloc_fields' => array(
			'label' => t('Wikiloc'),
			'description' => t('Wikiloc field iframe.'),
			'default_widget' => 'wikiloc_field_widget',
			'default_formatter' => 'wikiloc_field_formatter',
		),
	);
}

/**
 * Implements hook_field_formatter_info().
 */
function wikiloc_field_formatter_info() {
	return array(
			'wikiloc_field_formatter' => array(
					'label' => t('Wikiloc iframe'),
					'field types' => array('wikiloc_fields'),
			),
	);
}
/**
 * Implements hook_field_widget_info().
 */
function wikiloc_field_widget_info() {
	return array(
			'wikiloc_field_widget' => array(
					'label' => t('Wikiloc iframe'),
					'field types' => array('wikiloc_fields'),
			),
	);
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function wikiloc_field_is_empty($item, $field) {
	return empty($item['id']);
}



/**
 * Implements hook_field_formatter_view().
 *
 * @see wikiloc_field_formatter_info()
 */
function wikiloc_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();

	switch ($display['type']) {
		// This formatter simply outputs the iframe
		case 'wikiloc_field_formatter':
		foreach ($items as $delta => $item) {
			$wik_id = $item['id'];
			$wik_measures = ($item['measures']=='on') ? '&measures=on':'';
			$wik_near = ($item['near']=='on') ? '&near=on':'';
			$wik_images = ($item['images']=='on') ? '&images=on':'';
			$wik_maptype = $item['maptype'];
			$wik_width = $item['width'];
			$wik_height = $item['height'];

			$iframe = '<iframe scrolling="no" frameBorder="0" src="http://es.wikiloc.com/wikiloc/spatialArtifacts.do?event=view&id='.$wik_id.$wik_measures.$wik_near.$wik_images.'&maptype='.$wik_maptype.'" width="'.$wik_width.'px" height="'.$wik_height.'px"></iframe>';

			$element[$delta] = array(
	        '#markup' => $iframe,
	    );
		}
			break;

	}

	return $element;
}



/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function wikiloc_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

	switch ($instance['widget']['type']) {

		case 'wikiloc_field_widget':

		$element = array(
					'#type' => 'fieldset',
					'#title' => t('Location/Itinerary (wikiloc)'),
					'#langcode' => $langcode,
			);

foreach ($items as $delta => $item) {


			 $element['id'] = array(
				'#type' => 'textfield',
				'#title' => t('Wikiloc Id'),
				'#size' => 10,
				'#maxlength' => 10,
				'#required' => FALSE,
				'#default_value' => $item['id'],
			);

			 $element['measures'] = array(
				'#type' => 'select',
				'#title' => t('Measures'),
				'#options' => array(
					'of' => t('Off'),
					'on' => t('On'),
				),
				'#default_value' => ($item['measures'])?$item['measures']:'off',
				'#description' => t('measures')
			);

			 $element['near'] = array(
				'#type' => 'select',
				'#title' => t('Near'),
				'#options' => array(
					'of' => t('Off'),
					'on' => t('On'),
				),
				'#default_value' => ($item['near'])?$item['near']:'off',
				'#description' => t('near')
			);

			 $element['images'] = array(
				'#type' => 'select',
				'#title' => t('Images'),
				'#options' => array(
					'of' => t('Off'),
					'on' => t('On'),
				),
				'#default_value' => ($item['images'])?$item['images']:'off',
				'#description' => t('images')
			);

			 $element['maptype'] = array(
				'#type' => 'select',
				'#title' => t('Prefered map type'),
				'#options' => array(
					'M' => t('Normal Map'),
					'S' => t('Satellite Map'),
					'H' => t('Hybrid Map'),
					'T' => t('Terrain (physical) Map'),

				),
				'#default_value' => ($item['maptype'])?$item['maptype']:'T',
				'#description' => t('near')
			);

			 $element['width'] = array(
				'#type' => 'textfield',
				'#title' => t('Width iframe'),
				'#default_value' => ($item['width'])?$item['width']:600,
				'#size' => 10,
				'#maxlength' => 10,
			);
			 $element['height'] = array(
				'#type' => 'textfield',
				'#title' => t('Height iframe'),
				'#default_value' => ($item['height'])?$item['height']:400,
				'#size' => 10,
				'#maxlength' => 10,
			);
			}
			break;


	}

	return $element;
}

